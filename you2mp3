#!/usr/bin/python3
from pathlib import Path
from getopt import getopt
import youtube_dl
import re
from mutagen.id3 import ID3, TIT2, TALB, TPE1, TDRC, TRCK
import os
import sys

class Downloader:
    def __init__(self, url, album='unknown', artist='unknown', year='unknown'):
        self.url = url
        self.album = album
        self.artist = artist
        self.year = year

        self.opts = {
            'format': 'bestaudio/best',
            'outtmpl': '%(title)s.%(ext)s',
            'noplaylist' : False,
            'progress_hooks': [self.hook],
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }]
        }
        self.in_words = ['Official', 'Video', 'Lyric', 'Audio']
        self.songs = []

        self.change_folder()
        self.start_download()
        self.rename_and_tag()

    def rename_and_tag(self):
        for idx, song in enumerate(self.songs):
            os.rename(song['old_filename'], song['new_filename'])
            tags = ID3()
            tags['TIT2'] = TIT2(encoding=3, text=song['title'])
            tags['TALB'] = TALB(encoding=3, text=self.album)
            tags['TPE1'] = TPE1(encoding=3, text=self.artist)
            tags['TPE2'] = TPE2(encoding=3, text=self.artist)
            tags['TDRC'] = TDRC(encoding=3, text=self.year)
            tags['TRCK'] = TRCK(encoding=3, text=str(idx+1))
            tags.save(song['new_filename'])

    def change_folder(self):
        path = Path.home()
        if os.path.exists(path.joinpath('Musik')):
            path = path.joinpath('Musik')
        elif os.path.exists(path.joinpath('Music')):
            path = path.joinpath('Music')
        if not os.path.exists(path):
            os.mkdir(path)
        path = path.joinpath(self.artist)
        if not os.path.exists(path):
            os.mkdir(path)
        path = path.joinpath(self.album)
        if not os.path.exists(path):
            os.mkdir(path)
        os.chdir(path)

    def hook(self, d):
        if d['status'] == 'finished':
            # guess title
            title = self.guess_title(d['filename'])
            # append to songs
            new_filename = title + '.mp3'
            old_filename = d['filename'][:d['filename'].rfind('.')] + '.mp3'
            self.songs.append({'old_filename': old_filename, 'new_filename': new_filename, 'title': title})

    def start_download(self):
        with youtube_dl.YoutubeDL(self.opts) as ydl:
            ydl.download([self.url])

    def guess_title(self, title):
        # remove file extension
        title = title[:title.rfind('.')]
        # sort out parts containg artist name
        title_parts = title.split(' - ')
        artist_parts = self.artist.split(' ')
        for tpart in title_parts:
            for apart in artist_parts:
                if apart in tpart:
                    if tpart in title_parts:
                        title_parts.remove(tpart)
        title = 'unknown' if len(title_parts) == 0 else title_parts[0]
        # remove parentecies containing in_words
        for word in self.in_words:
            title = re.sub('[\(\[].*' + word + '.*[\)\]]', '', title)
        # trim title
        title = title.strip()
        return title

def interactive(args):
    if not 'url' in args:
        args['url'] = input('url: ')
    if not 'artist' in args:
        args['artist'] = input('artist: ')
    if not 'album' in args:
        args['album'] = input('album: ')
    if not 'year' in args:
        args['year'] = input('year: ')
    return args

def help():
    print('you2mp3 is a script to download music albums from YouTube and tag the mp3 files')
    print('-h\t\t shows this help page')
    print('-u <arg>\t specifies the url to the album')
    print('-a <arg>\t specifies the artist')
    print('-A <arg>\t specifies the album')
    print('-y <arg>\t specifies the year')
    print('-I \t\t asks for the arguments needed interactively')

def get_args():
    res = {}
    try:
        opts, args = getopt(sys.argv[1:], 'u:i:a:y:Ih')
    except getopt.GetoptError:
        help()
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-h':
            help()
            sys.exit(1)
        elif opt == '-u':
            res['url'] = arg
        elif opt == '-a':
            res['artist'] = arg
        elif opt == '-A':
            res['album'] = arg
        elif opt == '-y':
            res['year'] = arg
        elif opt == '-I':
            res = interactive(res)
    return res

if __name__ == '__main__':
    args = get_args()
    Downloader(url=args['url'], album=args['album'], artist=args['artist'], year=args['year'])
